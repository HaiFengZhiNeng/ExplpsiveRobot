apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'

def keystoreFilepath = ''
def keystorePSW = ''
def keystoreAlias = ''
def keystoreAliasPSW = ''
// default keystore file, PLZ config file path in local.properties
def keyfile = file('keystore.path')
def isExists = ''

Properties properties = new Properties()
// local.properties file in the root director keystore.path
properties.load(project.rootProject.file('local.properties').newDataInputStream())
keystoreFilepath = properties.getProperty("keystore.path")

if (keystoreFilepath) {
    keystorePSW = properties.getProperty("keystore.password")
    keystoreAlias = properties.getProperty("keystore.alias")
    keystoreAliasPSW = properties.getProperty("keystore.alias_password")
    keyfile = file(keystoreFilepath)
}

android {
    //配置签名信息
    signingConfigs {
        release {
            keyAlias keystoreAlias//签名的别名
            keyPassword keystoreAliasPSW//密码
            storeFile keyfile//签名文件的路径
            storePassword keystorePSW//签名密码
        }
    }
    //设置APK包的相关属性
    packagingOptions {
        exclude '*.apk'
    }
    dexOptions {
        jumboMode true
        incremental false
    }
    lintOptions {
        abortOnError false
    }
    //设置编译时用的Android版本
    compileSdkVersion 26
    //设置编译时使用的构建工具的版本
    buildToolsVersion "26.0.1"
    //设置一些默认属性，其可用属性是buildTypes和ProductFlavors之和
    defaultConfig {
        applicationId "com.example.explosiverobot"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        signingConfig signingConfigs.release
//        ndk {
//            abiFilters 'armeabi', 'armeabi-v7a', 'mips64'
//        }
    }
    buildTypes {
        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //前一部分代表系统默认的android程序的混淆文件，该文件已经包含了基本的混淆声明，后一个文件是自己的定义混淆文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
            if (keyfile.exists()) {
                println("WITH -> buildTypes -> release: using jks key")
                signingConfig signingConfigs.release
                isExists = 'jkskey'
            } else {
                println("WITH -> buildTypes -> release: using default key")
                isExists = 'defaultkey'
            }
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        // 输出apk名称为ruijie_v1.0_wandoujia.apk
                        def fileName = "my_${isExists}_${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
            //设置签名信息
//            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
    //配置不同风格的APP，在buildTypes的基础上还可以让每一个类型的APP拥有不同的风格，所以最终打出的APK的数量就是buildTypes乘以productFlavors
    productFlavors {
        //新增渠道staging，表示调试阶段的发布
        staging {
            minSdkVersion 19
            applicationId 'com.example.explosiverobot'
            signingConfig signingConfigs.release
            targetSdkVersion 25
            testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
            versionCode 1
            versionName '1.0.0'
        }
        //新增渠道production，表示产品发布阶段的发布
//        production {
//            minSdkVersion 14
//            applicationId 'com.haifeng.authentication'
//            signingConfig signingConfigs.release
//            targetSdkVersion 26
//            testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
//            versionCode 1
//            versionName '1.0.3'
//        }
        //其他不同apk市场渠道添加，类似...
    }
    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ['libs']
        }
    }
    //greendao配置
    greendao {
        //版本号，升级时可配置
        schemaVersion 1
        daoPackage 'com.example.explosiverobot.db'  //设置DaoMaster、DaoSession、Dao包名
        targetGenDir 'src/main/java' //设置DaoMaster、DaoSession、Dao目录
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(':amapsdk')
//    compile files('libs/gson-2.3.1.jar')
//    compile files('libs/okhttp-3.4.1.jar')
//    compile files('libs/okio-1.10.0.jar')
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.jakewharton:butterknife:8.8.1'
    compile 'com.jakewharton:butterknife-compiler:8.8.1'
    compile 'com.google.code.gson:gson:2.8.1'
//    compile 'com.android.support:support-v4:26.+'
    compile 'com.android.support:recyclerview-v7:26.0.0-alpha1'
    compile 'org.greenrobot:greendao:3.2.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    testCompile 'junit:junit:4.12'
    compile 'cn.pedant.sweetalert:library:1.3'
    compile project(':print')
    compile 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.3'
}
